/*
Catalex MP3 Board (YX5300 Chip)
DX http://www.dx.com/p/uart-control-serial-mp3-music-player-module-for-arduino-avr-arm-pic-blue-silver-342439#.WGrTxvnhCiN
Catalex MP3 Board (YX5300 Chip) 	http://www.da-share.com/misc/catalex-mp3-board-yx5300-chip/
zip file: http://www.da-share.com/files/datasheets/Catalex_YX5300_Docs.zip
Also forum discussion here http://www.thebackshed.com/forum/forum_posts.asp?TID=7319 - talks about issue playing small files
Docs say micro sd <= 2gb and micro sdhc <= 32gb

********************************************

CONNESSIONI SCHEDA <--> ARDUINO
	GND <---> GND
	VCC <---> 5V
	TX <---> D5 (Digital5)
	RX <---> D6 (Digital6)

********************************************

COMMAND SYNTAX . VARIABILI SOLO CMD,DATA1,DATA2
Mark	Byte	Byte description
$S		0x7E	Every command should start with $(0x7E)
VER		0xFF	Version information
Len		0x06	The number of bytes of the command without starting byte and ending byte
CMD		0xxx	Such as PLAY and PAUSE and so on
Feedback	0x00	0x00 = not feedback, 0x01 = feedback
data1		0xxx	The length of the data is not limit and usually it has two bytes
data2		0xxx	The length of the data is not limit and usually it has two bytes
$O		0xEF	Ending byte of the command

********************************************

 sendCommand(int8_t command, int16_t dat)  // ha 2 input, CMD e data1data2 (insieme) 

EX1 : sendCommand(0X22, 0X0F01) 
	CMD 0X22 [Play with volume] + DATA1 DATA2 0X0F01 = vol15 (0F) and 1st song (01) 
EX2 : VOLUME:  15 --> 0x0f | 	25 --> 0x19 (OK) |	30 --> 0x1E (ALTO)
								
CMD	data1	data2	Command	MEANING
1	0	0	[Next Song]	
2	0	0	[Previous Song]	
3	0	1	[Play with index]	Play the first song
3	0	2	[Play with index]	Play the second song
4	0	0	[Volume up]	Volume increased one
5	0	0	[Volume down]	Volume decrease one
6	0	1E	[Set volume]	Set the volume to 30 (0x1E is 30)
8	0	1	[Single cycle play]	Single cycle play the first song
9	0	2	[Select device]	Select storage device to TF card
0A	0	0	[Sleep mode]	Chip enters sleep mode
0B	0	0	[Wake up]	Chip wakes up
0C	0	0	[Reset]	Chip reset
0D	0	0	[Play]	Resume playback
0E	0	0	[Pause]	Playback is paused
0F	1	1	[Play  folder+file name]	Play the song with the directory: /01/001xxx.mp3
0F	1	2	[Play  folder+file name]	Play the song with the directory: /01/002xxx.mp3
16	0	0	[Stop play]	
17	0	1	[Cycle play in  folder]	01 folder cycle play
18	0	0	[Shuffle Play]	
19	0	0	[Set single cycle play]	Start up single cycle play
19	0	1	[Set single cycle play]	Close single cycle play
1A	0	0	[Set DAC]	Start up DAC output
1A	0	1	[Set DAC]	DAC no output
22	1E	1	[Play with volume]	Set the volume to 30 (0x1E is 30) and play the first song
22	0F	2	[Play with volume]	Set the volume to 15(0x0f is 15) and play the second song

*********************************************/


/***********************************************************/
//Demo for the Serial MP3 Player by Catalex
//Hardware: Serial MP3 Player *1
//Board:  Arduino UNO R3
//IDE:    Arduino-1.0
//Function:  To play the first song in the micro sd card.
//Store: http://www.aliexpress.com/store/1199788
//          http://www.dx.com/
#include <SoftwareSerial.h>

#define ARDUINO_RX 5//should connect to TX of the Serial MP3 Player module
#define ARDUINO_TX 6//connect to RX of the module
SoftwareSerial mySerial(ARDUINO_RX, ARDUINO_TX);

static int8_t Send_buf[8] = {0} ;

#define CMD_PLAY_W_INDEX 0X03
#define CMD_SET_VOLUME 0X06
#define CMD_SEL_DEV 0X09
#define DEV_TF 0X02
#define CMD_PLAY 0X0D
#define CMD_PAUSE 0X0E
#define CMD_SINGLE_CYCLE 0X19
#define SINGLE_CYCLE_ON 0X00
#define SINGLE_CYCLE_OFF 0X01
#define CMD_PLAY_W_VOL 0X22

void setup() 
{
  mySerial.begin(9600);
  delay(500);//Wait chip initialization is complete
    sendCommand(CMD_SEL_DEV, DEV_TF);//select the TF card  
  delay(200);//wait for 200ms
  sendCommand(CMD_PLAY_W_VOL, 0X1901);//play the first song with volume 25 (0x19) class
  
}
void loop() 
{

}

void sendCommand(int8_t command, int16_t dat)
{
  delay(20);
  Send_buf[0] = 0x7e; //starting byte
  Send_buf[1] = 0xff; //version
  Send_buf[2] = 0x06; //the number of bytes of the command without starting byte and ending byte
  Send_buf[3] = command; //
  Send_buf[4] = 0x00;//0x00 = no feedback, 0x01 = feedback
  Send_buf[5] = (int8_t)(dat >> 8);//datah
  Send_buf[6] = (int8_t)(dat); //datal
  Send_buf[7] = 0xef; //ending byte
  for(uint8_t i=0; i<8; i++)//
  
  {
    mySerial.write(Send_buf[i]) ;
  }
}

