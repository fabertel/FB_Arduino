/*
  HG7881_Motor_Driver_Example - Arduino
  Test doppio motore - FB
  https://www.BananaRobotics.com/shop/HG7881-(L9110)-Dual-Channel-Motor-Driver-Module
*/

// wired connections
#define HG7881_A_IA 11  // D11 --> Motor A Input A --> MOTOR A +
#define HG7881_A_IB 9   // D9  --> Motor A Input B --> MOTOR A -
#define HG7881_B_IA 10  // D10 --> Motor B Input A --> MOTOR B +
#define HG7881_B_IB 8 // D8  --> Motor B Input B --> MOTOR B -

// functional connections
#define MOTOR_A_PWM HG7881_A_IA // Motor A PWM Speed
#define MOTOR_A_DIR HG7881_A_IB // Motor A Direction
#define MOTOR_B_PWM HG7881_B_IA // Motor B PWM Speed
#define MOTOR_B_DIR HG7881_B_IB // Motor B Direction

// the actual values for "fast" and "slow" depend on the motor
#define PWM_SLOW 50  // arbitrary slow speed PWM duty cycle
#define PWM_FAST 200 // arbitrary fast speed PWM duty cycle
#define DIR_DELAY 1000 // brief delay for abrupt motor changes

void setup()
{
  Serial.begin( 9600 );
  pinMode( MOTOR_B_DIR, OUTPUT );
  pinMode( MOTOR_B_PWM, OUTPUT );
  pinMode( MOTOR_A_DIR, OUTPUT );
  pinMode( MOTOR_A_PWM, OUTPUT );
  digitalWrite( MOTOR_B_DIR, LOW );
  digitalWrite( MOTOR_B_PWM, LOW );
  digitalWrite( MOTOR_A_DIR, LOW );
  digitalWrite( MOTOR_A_PWM, LOW );
}

void MT_STOP() {
  digitalWrite( MOTOR_B_DIR, LOW );
  digitalWrite( MOTOR_B_PWM, LOW );
  digitalWrite( MOTOR_A_DIR, LOW );
  digitalWrite( MOTOR_A_PWM, LOW );
  Serial.println( "Soft stop (coast)..." );
}

void MT_FWD(int SPEED) {
  digitalWrite( MOTOR_B_DIR, HIGH ); // direction = forward
  analogWrite( MOTOR_B_PWM, 255 - SPEED ); // PWM speed = variobile
  digitalWrite( MOTOR_A_DIR, HIGH ); // direction = forward
  analogWrite( MOTOR_A_PWM, 255 - SPEED ); // PWM speed = variobile
  Serial.print( "FWD" );
  Serial.println( SPEED );
}

void MT_REV(int SPEED) {
  digitalWrite( MOTOR_B_DIR, LOW ); // direction = reverse
  analogWrite( MOTOR_B_PWM, SPEED ); // PWM speed = variobile
  digitalWrite( MOTOR_A_DIR, LOW ); // direction = reverse
  analogWrite( MOTOR_A_PWM, SPEED ); // PWM speed = variobile
  Serial.print( "REV" );
  Serial.println( SPEED );
}

void MT_MOVE(int SPEED, int DIRECTION) {
  digitalWrite( MOTOR_B_DIR, DIRECTION ); // direction = reverse
  analogWrite( MOTOR_B_PWM, SPEED ); // PWM speed = variobile
  digitalWrite( MOTOR_A_DIR, DIRECTION ); // direction = reverse
  analogWrite( MOTOR_A_PWM, SPEED ); // PWM speed = variobile
  Serial.print( DIRECTION );
  Serial.println( SPEED );
}

/*
MT_MOVE(PWM_SLOW,1); //FWD SLOW
MT_MOVE(PWM_SLOW,0); //REV SLOW
MT_MOVE(PWM_FAST,1); //FWD FAST
MT_MOVE(PWM_FAST,0); //REV FAST
MT_STOP()
MT_FWD(PWM_SLOW);   //FWD SLOW
MT_FWD(PWM_FAST);   //FWD FAST
MT_REV(PWM_SLOW);   //REV SLOW
MT_REV(PWM_FAST);   //REV FAST
*/

void loop()
{
  boolean isValidInput;
  // draw a menu on the serial port
  Serial.println( "-----------------------------" );
  Serial.println( "MOTOR v1" );
  Serial.println( "-----------------------------" );
MT_STOP();
Serial.println ("MT_STOP");
delay(DIR_DELAY);
MT_MOVE(PWM_SLOW, 1); //FWD SLOW
Serial.println ("FWD SLOW");
delay(DIR_DELAY);
MT_MOVE(PWM_SLOW, 0); //REV SLOW
Serial.println ("REV SLOW");
delay(DIR_DELAY);
MT_MOVE(PWM_FAST, 1); //FWD FAST
Serial.println ("FWD FAST");
delay(DIR_DELAY);
MT_MOVE(PWM_FAST, 0); //REV FAST
Serial.println ("REV FAST");
delay(DIR_DELAY);
MT_FWD(PWM_SLOW);   //FWD SLOW
Serial.println ("FWD SLOW");  
delay(DIR_DELAY);
MT_FWD(PWM_FAST);   //FWD FAST
Serial.println ("FWD FAST");
delay(DIR_DELAY);
MT_REV(PWM_SLOW);   //REV SLOW
Serial.println ("REV SLOW");
delay(DIR_DELAY);
MT_REV(PWM_FAST);   //REV FAST
Serial.println ("REV FAST");
delay(DIR_DELAY);


  Serial.println( "-----------------------------" );
  Serial.println( "End demo MOTOR v1" );
  Serial.println( "-----------------------------" );
}

